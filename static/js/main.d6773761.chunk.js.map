{"version":3,"sources":["components/Household.tsx","lib/formatDate.ts","lib/formatMoney.ts","components/Daily.tsx","lib/formatRoman.ts","components/Expense.tsx","components/Form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Wrapper","styled","div","HouseholdTable","table","Household","children","formatDate","date","substr","formatMoney","money","toString","replace","IndexTd","td","ModifyButton","GreenTd","props","align","LimeTd","minus","IncomeTextField","input","Daily","index","income","total","modify","setModify","onModify","useState","String","incomeValue","setIncomeValue","rowSpan","length","colSpan","value","type","onChange","e","target","onKeyDown","keyCode","preventDefault","key","Number","autoFocus","onClick","style","fontSize","formatRoman","num","a","roman","romanNumList","M","CM","D","CD","C","XC","L","XV","X","IX","V","IV","I","Math","floor","i","tr","RemoveButton","YellowTd","Expense","id","name","price","place","onRemove","useStyles","makeStyles","theme","createStyles","textField","maxWidth","button","marginTop","spacing","Form","data","setData","Date","setDate","setName","setPrice","setPlace","classes","utils","DateFnsUtils","locale","koLocale","autoOk","variant","inputVariant","margin","fullWidth","className","format","label","TextField","InputProps","endAdornment","InputAdornment","position","Button","isNaN","year","getFullYear","month","getMonth","day","getDate","strDate","selectDataIndex","findIndex","daily","maxId","reduce","acc","maxDailyId","expenses","expense","addedData","localStorage","setItem","JSON","stringify","filteredData","filter","selectData","push","handleAdd","color","Container","App","localData","getItem","getData","parse","initialData","sortedData","sort","b","map","sortedExpenses","handleRemove","removedData","handleModify","modifiedData","idx","cur","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d6773761.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  flex: 1;\n`;\n\nconst HouseholdTable = styled.table`\n  width: 100%;\n`;\n\ntype HouseholdProps = {\n  children: JSX.Element[];\n};\n\nexport default function Household({ children }: HouseholdProps) {\n  return (\n    <Wrapper>\n      <HouseholdTable>\n        <caption>가계부</caption>\n        {children}\n      </HouseholdTable>\n    </Wrapper>\n  );\n}\n","const formatDate = (date: string): string => {\n  const year = date.substr(0, 4);\n  const month = date.substr(4, 2);\n  const day = date.substr(6, 2);\n  return year + \"/\" + month + \"/\" + day;\n};\n\nexport default formatDate;\n","const formatMoney = (money: number): string =>\n  money.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\nexport default formatMoney;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport formatDate from \"../lib/formatDate\";\nimport formatMoney from \"../lib/formatMoney\";\nimport EditIcon from \"@material-ui/icons/Edit\";\n\nconst IndexTd = styled.td`\n  background: #0000ff;\n  color: #ffffff;\n  text-align: center;\n`;\n\nconst ModifyButton = styled.div`\n  font-size: 1rem;\n  float: right;\n  display: none;\n  cursor: pointer;\n`;\n\nconst GreenTd = styled.td`\n  background: #00ff00;\n  color: #000000;\n  text-align: ${props => props.align};\n  :hover ${ModifyButton} {\n    display: block;\n  }\n`;\n\ntype LimeTdPropsType = {\n  minus?: boolean;\n};\n\nconst LimeTd = styled.td<LimeTdPropsType>`\n  background: #a3dd08;\n  color: ${props => (props.minus ? \"#FF0000\" : \"#000000\")};\n  text-align: ${props => props.align};\n`;\n\nconst IncomeTextField = styled.input`\n  border: none;\n  background: transparent;\n  width: 100%;\n  font-size: 1rem;\n`;\n\ntype DailyProps = {\n  index: number;\n  date: string;\n  income: number;\n  total: number;\n  children: JSX.Element[];\n  modify: boolean;\n  setModify: (modify: number) => void;\n  onModify: (index: number, income: number) => void;\n};\n\nexport default function Daily({\n  index,\n  date,\n  income,\n  total,\n  children,\n  modify,\n  setModify,\n  onModify\n}: DailyProps) {\n  const [incomeValue, setIncomeValue] = useState(String(income));\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (\n      e.keyCode === 69 ||\n      e.keyCode === 190 ||\n      e.keyCode === 109 ||\n      e.keyCode === 189\n    ) {\n      e.preventDefault();\n    }\n    if (e.key === \"Enter\") {\n      onModify(index, Number(incomeValue));\n      setModify(0);\n    }\n  };\n  return (\n    <tbody>\n      <tr>\n        <IndexTd rowSpan={children.length + 5}>{index}</IndexTd>\n        <GreenTd align=\"center\">날짜:{formatDate(date)}</GreenTd>\n        <GreenTd align=\"center\">수입</GreenTd>\n        <GreenTd align=\"left\" colSpan={2}>\n          {modify ? (\n            <IncomeTextField\n              value={incomeValue}\n              type=\"number\"\n              onChange={e => setIncomeValue(e.target.value)}\n              onKeyDown={handleKeyDown}\n              autoFocus\n            />\n          ) : (\n            <>\n              {formatMoney(income)}\n              <ModifyButton\n                onClick={() => {\n                  setIncomeValue(String(income));\n                  setModify(index);\n                }}\n              >\n                <EditIcon style={{ fontSize: 14 }} />\n              </ModifyButton>\n            </>\n          )}\n        </GreenTd>\n      </tr>\n      <tr>\n        <GreenTd align=\"center\">번호</GreenTd>\n        <GreenTd align=\"center\">품목</GreenTd>\n        <GreenTd align=\"center\">가격</GreenTd>\n        <GreenTd align=\"center\">구입처</GreenTd>\n      </tr>\n      {children}\n      <tr>\n        <LimeTd align=\"center\">개수</LimeTd>\n        <LimeTd align=\"left\" colSpan={3}>\n          {children.length}\n        </LimeTd>\n      </tr>\n      <tr>\n        <LimeTd align=\"center\">총지출</LimeTd>\n        <LimeTd align=\"left\" colSpan={3}>\n          {formatMoney(total)}\n        </LimeTd>\n      </tr>\n      <tr>\n        <LimeTd align=\"center\">잔액</LimeTd>\n        <LimeTd align=\"left\" colSpan={3} minus={income < total}>\n          {income < total ? \"[적자]\" : null}\n          {formatMoney(income - total)}\n        </LimeTd>\n      </tr>\n    </tbody>\n  );\n}\n","const formatRoman = (num: number): string => {\n  let roman = \"\";\n  const romanNumList: { [key: string]: number } = {\n    M: 1000,\n    CM: 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n    L: 50,\n    XV: 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I: 1\n  };\n  let a;\n  for (let key in romanNumList) {\n    a = Math.floor(num / romanNumList[key]);\n    if (a >= 0) {\n      for (let i = 0; i < a; i++) {\n        roman += key;\n      }\n    }\n    num = num % romanNumList[key];\n  }\n\n  return roman;\n};\n\nexport default formatRoman;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport formatRoman from \"../lib/formatRoman\";\nimport formatMoney from \"../lib/formatMoney\";\n\nconst Wrapper = styled.tr``;\n\nconst RemoveButton = styled.div`\n  color: #ff0000;\n  float: right;\n  margin: 0;\n  padding: 0;\n  cursor: pointer;\n  display: none;\n  ${Wrapper}:hover & {\n    display: block;\n  }\n`;\n\nconst YellowTd = styled.td`\n  background: #ffff00;\n  color: #000000;\n  text-align: ${props => props.align};\n`;\n\ntype ExpenseProps = {\n  id: number;\n  index: number;\n  name: string;\n  price: number;\n  place: string;\n  onRemove: (id: number) => void;\n};\n\nexport default function Expense({\n  id,\n  index,\n  name,\n  price,\n  place,\n  onRemove\n}: ExpenseProps) {\n  return (\n    <Wrapper>\n      <YellowTd align=\"center\">{formatRoman(index)}.</YellowTd>\n      <YellowTd align=\"left\">{name}</YellowTd>\n      <YellowTd align=\"right\">{formatMoney(price)}</YellowTd>\n      <YellowTd align=\"left\">\n        {place}\n        <RemoveButton onClick={() => onRemove(id)}>&times;</RemoveButton>\n      </YellowTd>\n    </Wrapper>\n  );\n}\n","import React, { useState } from \"react\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport koLocale from \"date-fns/locale/ko\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker\n} from \"@material-ui/pickers\";\nimport { TextField, InputAdornment, Button } from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  flex: 1;\n  text-align: center;\n`;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    textField: {\n      maxWidth: 300\n    },\n    button: {\n      marginTop: theme.spacing(3),\n      maxWidth: 300\n    }\n  })\n);\n\ntype Data = {\n  date: string;\n  income: number;\n  expenses: {\n    id: number;\n    name: string;\n    price: number;\n    place: string;\n  }[];\n}[];\n\ntype FormProps = {\n  data: Data;\n  setData: (data: Data) => void;\n};\n\nexport default function Form({ data, setData }: FormProps) {\n  const [date, setDate] = useState<Date | null>(new Date());\n  const [name, setName] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [place, setPlace] = useState(\"\");\n  const classes = useStyles();\n\n  const handleAdd = (): void => {\n    if (!date) {\n      // 오류\n      return;\n    }\n    if (isNaN(Number(price))) {\n      // 오류\n      return;\n    }\n\n    const year = date.getFullYear().toString();\n    const month = String(date.getMonth() + 1);\n    const day = date.getDate().toString();\n\n    const strDate =\n      year + (month[1] ? month : \"0\" + month) + (day[1] ? day : \"0\" + day);\n\n    const selectDataIndex = data.findIndex(daily => daily.date === strDate);\n\n    const maxId = data.reduce((acc, daily) => {\n      const maxDailyId = daily.expenses.reduce(\n        (acc, expense) => (expense.id > acc ? expense.id : acc),\n        0\n      );\n      return acc > maxDailyId ? acc : maxDailyId;\n    }, 0);\n\n    if (selectDataIndex === -1) {\n      const addedData = [\n        ...data,\n        {\n          date: strDate,\n          income: 0,\n          expenses: [\n            {\n              id: maxId + 1,\n              name,\n              price: Number(price),\n              place\n            }\n          ]\n        }\n      ];\n      localStorage.setItem(\"data\", JSON.stringify(addedData));\n      setData(addedData);\n    } else {\n      const filteredData = data.filter(daily => daily.date !== strDate);\n      const selectData = data[selectDataIndex];\n      selectData.expenses.push({\n        id: maxId + 1,\n        name,\n        price: Number(price),\n        place\n      });\n      localStorage.setItem(\n        \"data\",\n        JSON.stringify([...filteredData, selectData])\n      );\n      setData([...filteredData, selectData]);\n    }\n    setName(\"\");\n    setPrice(\"\");\n    setPlace(\"\");\n  };\n\n  return (\n    <Wrapper>\n      <MuiPickersUtilsProvider utils={DateFnsUtils} locale={koLocale}>\n        <KeyboardDatePicker\n          autoOk\n          variant=\"inline\"\n          inputVariant=\"outlined\"\n          margin=\"normal\"\n          fullWidth\n          className={classes.textField}\n          format=\"yyyy/MM/dd\"\n          label=\"날짜\"\n          value={date}\n          onChange={(date: Date | null) => setDate(date)}\n        />\n      </MuiPickersUtilsProvider>\n      <br />\n      <TextField\n        variant=\"outlined\"\n        margin=\"normal\"\n        fullWidth\n        className={classes.textField}\n        label=\"품목\"\n        value={name}\n        onChange={e => setName(e.target.value)}\n      />\n      <br />\n      <TextField\n        variant=\"outlined\"\n        margin=\"normal\"\n        fullWidth\n        className={classes.textField}\n        label=\"가격\"\n        value={price}\n        onChange={e => setPrice(e.target.value)}\n        InputProps={{\n          endAdornment: <InputAdornment position=\"end\">원</InputAdornment>\n        }}\n      />\n      <br />\n      <TextField\n        variant=\"outlined\"\n        margin=\"normal\"\n        fullWidth\n        className={classes.textField}\n        label=\"구입처\"\n        value={place}\n        onChange={e => setPlace(e.target.value)}\n      />\n      <br />\n      <Button\n        onClick={() => handleAdd()}\n        variant=\"contained\"\n        color=\"primary\"\n        fullWidth\n        className={classes.button}\n      >\n        추가\n      </Button>\n    </Wrapper>\n  );\n}\n","import React, { useState } from \"react\";\nimport { data as initialData } from \"./lib/data.json\";\nimport styled from \"styled-components\";\n\n// components\nimport Household from \"./components/Household\";\nimport Daily from \"./components/Daily\";\nimport Expense from \"./components/Expense\";\nimport Form from \"./components/Form\";\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nfunction App() {\n  const localData = localStorage.getItem(\"data\");\n  type dataType = {\n    date: string;\n    income: number;\n    expenses: {\n      id: number;\n      name: string;\n      price: number;\n      place: string;\n    }[];\n  }[];\n  const getData: dataType = localData ? JSON.parse(localData) : initialData;\n  const [data, setData] = useState(getData);\n  const [modify, setModify] = useState();\n\n  const sortedData = data\n    .sort((a, b) => {\n      // 날짜별 정렬\n      if (a.date > b.date) return 1;\n      else if (b.date > a.date) return -1;\n      else return 0;\n    })\n    .map(daily => {\n      const sortedExpenses = daily.expenses.sort((a, b) => {\n        // 구입처별 내림차순 정렬\n        if (a.place > b.place) return -1;\n        else if (b.place > a.place) return 1;\n        else return 0;\n      });\n      return {\n        ...daily,\n        expenses: sortedExpenses\n      };\n    });\n\n  const handleRemove = (id: number): void => {\n    const removedData = data.map(daily => {\n      return {\n        ...daily,\n        expenses: daily.expenses.filter(expense => expense.id !== id)\n      };\n    });\n    localStorage.setItem(\"data\", JSON.stringify(removedData));\n    setData(removedData);\n  };\n\n  const handleModify = (index: number, income: number): void => {\n    const modifiedData = data.map((daily, idx) =>\n      idx !== index - 1\n        ? daily\n        : {\n            ...daily,\n            income\n          }\n    );\n    localStorage.setItem(\"data\", JSON.stringify(modifiedData));\n    setData(modifiedData);\n  };\n\n  return (\n    <Container>\n      <Household>\n        {sortedData.map((daily, idx) => (\n          <Daily\n            key={idx}\n            index={idx + 1}\n            date={daily.date}\n            income={daily.income}\n            total={daily.expenses.reduce((acc, cur) => acc + cur.price, 0)}\n            modify={modify === idx + 1}\n            setModify={setModify}\n            onModify={handleModify}\n          >\n            {daily.expenses.map((expense, idx) => (\n              <Expense\n                key={idx}\n                id={expense.id}\n                index={idx + 1}\n                name={expense.name}\n                price={expense.price}\n                place={expense.place}\n                onRemove={handleRemove}\n              />\n            ))}\n          </Daily>\n        ))}\n      </Household>\n      <Form data={data} setData={setData} />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}