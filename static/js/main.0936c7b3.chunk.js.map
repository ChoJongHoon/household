{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Title","styled","h1","TableWrapper","table","TdGreen","td","props","align","TdBlue","TdYellow","App","data","map","item","idx","rowSpan","products","length","date","colSpan","income","name","price","place","reduce","acc","cur","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yyBAIA,IAAMA,EAAQC,IAAOC,GAAV,KAILC,EAAeF,IAAOG,MAAV,KAEZC,EAAUJ,IAAOK,GAAV,KAGG,SAAAC,GAAK,OAAIA,EAAMC,SAIzBC,EAASR,IAAOK,GAAV,KAGI,SAAAC,GAAK,OAAIA,EAAMC,SAGzBE,EAAWT,IAAOK,GAAV,KAGE,SAAAC,GAAK,OAAIA,EAAMC,SAiEhBG,EA9DO,WACpB,OACE,6BACE,kBAACX,EAAD,2BACA,kBAACG,EAAD,KACGS,EAAKA,KAAKC,KAAI,SAACC,EAAMC,GAAP,OACb,oCACE,4BACE,kBAACN,EAAD,CAAQO,QAASF,EAAKG,SAASC,OAAS,GAAIH,EAAM,GAClD,kBAACV,EAAD,CAASG,MAAM,UAAf,gBAA4BM,EAAKK,MACjC,kBAACd,EAAD,CAASG,MAAM,UAAf,gBACA,kBAACH,EAAD,CAASe,QAAS,EAAGZ,MAAM,QACxBM,EAAKO,SAGV,4BACE,kBAAChB,EAAD,CAASG,MAAM,UAAf,gBACA,kBAACH,EAAD,CAASG,MAAM,UAAf,gBACA,kBAACH,EAAD,CAASG,MAAM,UAAf,gBACA,kBAACH,EAAD,CAASG,MAAM,UAAf,uBAEDM,EAAKG,SAASJ,KAAI,SAACC,EAAMC,GAAP,OACjB,oCACE,4BACE,kBAACL,EAAD,CAAUF,MAAM,UAAUO,EAAM,EAAhC,KACA,kBAACL,EAAD,CAAUF,MAAM,QAAQM,EAAKQ,MAC7B,kBAACZ,EAAD,CAAUF,MAAM,SAASM,EAAKS,OAC9B,kBAACb,EAAD,CAAUF,MAAM,QAAQM,EAAKU,YAKnC,4BACE,kBAACd,EAAD,CAAUF,MAAM,UAAhB,gBACA,kBAACE,EAAD,CAAUU,QAAS,EAAGZ,MAAM,QACzBM,EAAKG,SAASC,SAGnB,4BACE,kBAACR,EAAD,CAAUF,MAAM,UAAhB,sBACA,kBAACE,EAAD,CAAUU,QAAS,EAAGZ,MAAM,QACzBM,EAAKG,SAASQ,QAAO,SAACC,EAAKC,GAC1B,OAAOD,EAAMC,EAAIJ,QAChB,KAGP,4BACE,kBAACb,EAAD,CAAUF,MAAM,UAAhB,gBACA,kBAACE,EAAD,CAAUU,QAAS,EAAGZ,MAAM,QACzBM,EAAKO,OACJP,EAAKG,SAASQ,QAAO,SAACC,EAAKC,GACzB,OAAOD,EAAMC,EAAIJ,QAChB,YCrEDK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0936c7b3.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport data from \"./data.json\";\n\nconst Title = styled.h1`\n  text-align: center;\n`;\n\nconst TableWrapper = styled.table``;\n\nconst TdGreen = styled.td`\n  background: #00ff00;\n  color: #000;\n  text-align: ${props => props.align};\n  min-width: 120px;\n`;\n\nconst TdBlue = styled.td`\n  background: #0000ff;\n  color: #fff;\n  text-align: ${props => props.align};\n`;\n\nconst TdYellow = styled.td`\n  background: #ffff00;\n  color: #000;\n  text-align: ${props => props.align};\n`;\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <Title>가계부</Title>\n      <TableWrapper>\n        {data.data.map((item, idx) => (\n          <>\n            <tr>\n              <TdBlue rowSpan={item.products.length + 5}>{idx + 1}</TdBlue>\n              <TdGreen align=\"center\">날짜:{item.date}</TdGreen>\n              <TdGreen align=\"center\">수입</TdGreen>\n              <TdGreen colSpan={2} align=\"left\">\n                {item.income}\n              </TdGreen>\n            </tr>\n            <tr>\n              <TdGreen align=\"center\">번호</TdGreen>\n              <TdGreen align=\"center\">품목</TdGreen>\n              <TdGreen align=\"center\">가격</TdGreen>\n              <TdGreen align=\"center\">구입처</TdGreen>\n            </tr>\n            {item.products.map((item, idx) => (\n              <>\n                <tr>\n                  <TdYellow align=\"center\">{idx + 1}.</TdYellow>\n                  <TdYellow align=\"left\">{item.name}</TdYellow>\n                  <TdYellow align=\"right\">{item.price}</TdYellow>\n                  <TdYellow align=\"left\">{item.place}</TdYellow>\n                </tr>\n              </>\n            ))}\n\n            <tr>\n              <TdYellow align=\"center\">개수</TdYellow>\n              <TdYellow colSpan={3} align=\"left\">\n                {item.products.length}\n              </TdYellow>\n            </tr>\n            <tr>\n              <TdYellow align=\"center\">총지출</TdYellow>\n              <TdYellow colSpan={3} align=\"left\">\n                {item.products.reduce((acc, cur) => {\n                  return acc + cur.price;\n                }, 0)}\n              </TdYellow>\n            </tr>\n            <tr>\n              <TdYellow align=\"center\">잔액</TdYellow>\n              <TdYellow colSpan={3} align=\"left\">\n                {item.income -\n                  item.products.reduce((acc, cur) => {\n                    return acc + cur.price;\n                  }, 0)}\n              </TdYellow>\n            </tr>\n          </>\n        ))}\n      </TableWrapper>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}